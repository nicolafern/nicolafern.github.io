<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Nicola Fern - Learning Technologist</title>
 <link href="https://nicolafern.github.io/atom.xml" rel="self"/>
 <link href="https://nicolafern.github.io/"/>
 <updated>2016-09-18T17:34:15+01:00</updated>
 <id>https://nicolafern.github.io</id>
 <author>
   <name>Nicola Fern</name>
   <email>nicola@nicolafern.com</email>
 </author>

 
 <entry>
   <title>Time Warp</title>
   <link href="https://nicolafern.github.io/Time-Warp.html"/>
   <updated>2016-02-22T13:26:34+00:00</updated>
   <id>https://nicolafern.github.io/Time-Warp</id>
   <content type="html">&lt;p&gt;I’ve been experimenting with equipment and techniques in filming lately.  Last week, I shot a 90 minute video of the entrance to the chemotherapy department at the hospital I work at, and compressed it down to 55 seconds (with a speed increase of 10,000% - this seemed to give the best results).&lt;/p&gt;

&lt;p&gt;It was shot on a Canon XA20 camcorder, set to cinema mode and manual focus.&lt;/p&gt;

&lt;p&gt;I had the tripod pretty much as high as it would go, and the camera at a slight angle, to get the bulk of the building in shot, with a good amount of sky, while also avoiding the actually pretty extensive construction barriers and activities going on to the right of the shot.&lt;/p&gt;

&lt;p&gt;I particularly like how the light and sky reflects off the building windows, and the crane movements.  I think it’s a pretty effective representation of the life of the building, and is nice and dynamic.  It will probably be used for cutaways and intro sequences for some of the other videos we are producing at the moment.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/156244145&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/156244145&quot;&gt;Chemo dept time lapse&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/user49231758&quot;&gt;Nicola Fern&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Macrology</title>
   <link href="https://nicolafern.github.io/Macrology.html"/>
   <updated>2016-01-14T13:26:34+00:00</updated>
   <id>https://nicolafern.github.io/Macrology</id>
   <content type="html">&lt;p&gt;I’m no programmer, as I’ve probably mentioned before…However, I have been learning and improving somewhat in that regard lately, and I’m never afraid to have a bash and conjure up some Frankencode, poking it, stitching bits together and generally waving a lightning rod at it until it does what I want.&lt;/p&gt;

&lt;p&gt;My latest adventure was brought to me by a colleague who wanted to be able to generate a censored version of an Excel workbook for sharing with others, which removed some of the columns containing personal information, while preserving tab names and as much formatting as possible.&lt;/p&gt;

&lt;p&gt;I looked online and couldn’t find something exact, so I set about piecing something together from different pages and help sites.  I thought I’d share my resultant code here in case anyone else found it useful…&lt;/p&gt;

&lt;p&gt;It’s worth noting one issue that drove me a bit batty:&lt;/p&gt;

&lt;p&gt;The Worksheets(1), Worksheets(2), Worksheets(3)…numbering in the code refer to each sheet in the source workbook numerically from the sheet beginning at the left hand page…so you have to count sheets from left to right to find out which number your sheet is.  This is confusing since it effectively means each sheet has three potential names or labels:  This strict number order, the (name) - defaults to a sheet number (i.e. depending on which order the sheets are created in), and lastly the visible label on the tab - often whatever name you give it.  These last two can be changed by the user.  The sheet highlighted in the grab below has been given a (name) of test, has a Name of Sheet1, and then on screen it’s the last tab (Sheet 42) - so the reference in the Macro code below for it would end up being Worksheets(42).  It can be &lt;em&gt;very&lt;/em&gt; confusing. This workbook had those 42 tabs, and all the sheet references had to be worked out by counting on the screen - because the sheets had been created dynamically and moved around, the numbers they were assigned by the system didn’t correspond to their location.  As an example, I have a sheet labelled on the tab as Sheet 2, with a (name) of Sheet42, but in position 32 - so the reference would be Worksheets(32)!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/macrograb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, rant over - here’s the code - I hope it saves at lease one person some frustration!&lt;/p&gt;

&lt;p&gt;Note: When pasting the code, if the comments (lines preceded by ‘) wrap across multiple lines, comment extra lines out with ‘ or delete them as VBA doesn’t like multi-line comments.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Macro for duplicating selected columns from selected Excel worksheets into a new workbook&lt;/b&gt;&lt;/p&gt;

&lt;pre class=&quot;pre-scrollable&quot;&gt;&lt;code&gt;
'replace this with the name of your macro
Sub CopyData()

'defines your variable names as cell ranges
Dim sourceColumnSh1 As Range, sourceColumnSh2 As Range, sourceColumnSh3 As Range, sourceColumnSh4 As Range, sourceColumnSh5 As Range

'Tells excel how many sheets we want new workbooks to contain - replace 5 with any number
Application.SheetsInNewWorkbook = 5

'1st line creates the new workbook, and the subsequent lines declare names for each sheet
Set targetBook = Workbooks.Add
Sheets(&quot;Sheet1&quot;).Name = &quot;AU&quot;
Sheets(&quot;Sheet2&quot;).Name = &quot;CCU&quot;
Sheets(&quot;Sheet3&quot;).Name = &quot;CTU&quot;
Sheets(&quot;Sheet4&quot;).Name = &quot;Comp Therapy&quot;
Sheets(&quot;Sheet5&quot;).Name = &quot;Endo&quot;

'The following codeblock assigns a cell range from the original workbook to the variable.
'It also specifies the column destination in the new workbook (i.e. Col A means it will 
'be pasted into the workbook starting at the first column.This is probably what you want)
'Duplicate this block and the Destination line below for each sheet you want to copy
'Change the cell range to reflect the columns you want to extract
'To take the whole column, use &quot;A:A&quot; - but I found that this caused large file (on the order of 
'36MB) issues when there were hidden cells (i.e. if a filter was used on the original file) so I 
'recommend limiting the rows to a reasonable number. Change the '150' part to increase or 
'decrease the rows copied.

Set sourceColumnSh1 = Workbooks(&quot;YourSourceFileName.xlsm&quot;).Worksheets(1).Range(&quot;A1:A150,B1:B150,E1:E150,F1:F150,G1:G150,H1:H150,J1:J150,K1:K150,N1:N150&quot;)
'Worksheets(1) in the line above refers to the source worksheet reference.
Set targetBook = Worksheets(1).Columns(&quot;A&quot;)
'Worksheets(1) in the line above refers to the destination worksheet reference.

sourceColumnSh1.Copy Destination:=targetBook
'The line above copies the cells from the first workbook into the new one.

Set sourceColumnSh2 = Workbooks(&quot;YourSourceFilename.xlsm&quot;).Worksheets(2).Range(&quot;A1:A150,B1:B150,E1:E150,F1:F150,G1:G150,H1:H150,J1:J150,K1:K150,N1:N150&quot;)
Set targetBook = Worksheets(2).Columns(&quot;A&quot;)

sourceColumnSh2.Copy Destination:=targetBook

Set sourceColumnSh3 = Workbooks(&quot;YourSourceFilename.xlsm&quot;).Worksheets(3).Range(&quot;A1:A150,B1:B150,E1:E150,F1:F150,G1:G150,H1:H150,J1:J150,K1:K150,N1:N150&quot;)
Set targetBook = Worksheets(3).Columns(&quot;A&quot;)

sourceColumnSh3.Copy Destination:=targetBook

Set sourceColumnSh4 = Workbooks(&quot;YourSourceFilename.xlsm&quot;).Worksheets(4).Range(&quot;A1:A150,B1:B150,E1:E150,F1:F150,G1:G150,H1:H150,J1:J150,K1:K150,N1:N150&quot;)
Set targetBook = Worksheets(4).Columns(&quot;A&quot;)

sourceColumnSh4.Copy Destination:=targetBook

Set sourceColumnSh5 = Workbooks(&quot;YourSourceFilename.xlsm&quot;).Worksheets(5).Range(&quot;A1:A150,B1:B150,E1:E150,F1:F150,G1:G150,H1:H150,J1:J150,K1:K150,N1:N150&quot;)
Set targetBook = Worksheets(5).Columns(&quot;A&quot;)

sourceColumnSh5.Copy Destination:=targetBook

End Sub
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 

</feed>